# Бэкап бота без выбора личностей, без списка!


import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
from PyCharacterAI import Client

# Загружаем токены из переменных окружения
TELEGRAM_BOT_TOKEN = '6956061902:AAE2Lc-e8oYPbpjJ7Fe6rQEjII3JgmzYNA0'
CHARACTER_AI_TOKEN = '9938692966813a4e31c9ce5cc9d306ffd22c369d'

character_id = "b_Yo9_TKUggpWjoftwf3AqZCS4FY1n4T0cC8aVEdhY4"  # Lily (by @landon)

# Инициализируем клиент AI-чата
ai_client = Client()
asyncio.run(ai_client.authenticate_with_token(CHARACTER_AI_TOKEN))
ai_chat = asyncio.run(ai_client.create_or_continue_chat(character_id))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="Здравствуйте! Я бот, который использует AI-чат для общения.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Отправляем сообщение в AI-чат и получаем ответ
    ai_response = await ai_chat.send_message(update.message.text)
    
    # Отправляем ответ обратно в Telegram
    await context.bot.send_message(chat_id=update.effective_chat.id, text=ai_response.text)

if __name__ == '__main__':
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    start_handler = CommandHandler('start', start)
    message_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)

    application.add_handler(start_handler)
    application.add_handler(message_handler)

    # Создаем новый событийный цикл
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # Запускаем приложение внутри события цикла
    loop.run_until_complete(application.run_polling())
    loop.close()